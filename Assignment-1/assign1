GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from mult...done.
(gdb) l 
27	   {
28	      cout<< "inf" << endl;
29	   }
30	}
31	int main ()
32	{
33	   pthread_t threads[NUM_THREADS];
34	   int rc;
35	   int i;
36	   int arr[] = {5,6,7,8,9,12,34,56,78};
(gdb) 
37	  // cin >> arr[20]; 
38	   foo();
39	   for( i=0; i < NUM_THREADS; i++ ){
40	      cout << "main() : creating thread, " << i << endl;
41	      rc = pthread_create(&threads[i], NULL, 
42	                          PrintHello, (void *)i);
43	      if (rc){
44	         cout << "Error:unable to create thread," << rc << endl;
45	         exit(-1);
46	      }
(gdb) 
47	   }
48	   pthread_exit(NULL);
49	
50	}(gdb) 
(gdb) b 41
Breakpoint 1 at 0x400b0a: file multiThread.cpp, line 41.
(gdb) l 1,50
1	#include <iostream>
2	#include <cstdlib>
3	#include <pthread.h>
4	#include <array>
5	
6	using namespace std;
7	
8	#define NUM_THREADS     10
9	
10	void *PrintHello(void *threadid)
11	{
12	   long tid;
13	   tid = (long)threadid;
14	   cout << "Hello World! Thread ID, " << tid << endl;
15	   pthread_exit(NULL);
16	}
17	
18	void foo()
19	{
20	   int  *x = 0;
21	  *x =100;
22	}
23	
24	void inf()
25	{
26	   while(1)
27	   {
28	      cout<< "inf" << endl;
29	   }
30	}
31	int main ()
32	{
33	   pthread_t threads[NUM_THREADS];
34	   int rc;
35	   int i;
36	   int arr[] = {5,6,7,8,9,12,34,56,78};
37	  // cin >> arr[20]; 
38	   foo();
39	   for( i=0; i < NUM_THREADS; i++ ){
40	      cout << "main() : creating thread, " << i << endl;
41	      rc = pthread_create(&threads[i], NULL, 
42	                          PrintHello, (void *)i);
43	      if (rc){
44	         cout << "Error:unable to create thread," << rc << endl;
45	         exit(-1);
46	      }
47	   }
48	   pthread_exit(NULL);
49	
50	}(gdb) 
(gdb) b 13
Breakpoint 2 at 0x400a09: file multiThread.cpp, line 13.
(gdb) b 15
Breakpoint 3 at 0x400a3c: file multiThread.cpp, line 15.
(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400b0a in main() at multiThread.cpp:41
2       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
3       breakpoint     keep y   0x0000000000400a3c in PrintHello(void*) at multiThread.cpp:15
(gdb) bt
(gdb) run
Starting program: /home/siddharth/Documents/ALL-MY-FILES/7thsem/SoftwareEngineering/lab/Assignment-1/mult 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000400a56 in foo () at multiThread.cpp:21
21	  *x =100;
(gdb) core [K-file core
A program is being debugged already.  Kill it? (y or n) [New LWP 5326]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `./multiThread'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x0000000000400a56 in foo () at multiThread.cpp:21
21	  *x =100;
(gdb) p x
$1 = (int *) 0x0
(gdb) edit 21
(gdb) esi[K[Kdi [Kt mutl[K[KltiThread.cpp 
(gdb) watch -l 35[K[K14 [K[K[Ktid[K[K[K[K[K[K[K[K[K[K[K[Kinfo locals
x = 0x0
(gdb) quit
