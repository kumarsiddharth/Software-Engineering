GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from mult...done.
(gdb) l 50
45	         exit(-1);
46	      }
47	   }
48	   pthread_exit(NULL);
49	
50	}(gdb) l [K[K
(gdb) l 
(gdb) l 1.50
(gdb) l 1,50
1	#include <iostream>
2	#include <cstdlib>
3	#include <pthread.h>
4	#include <array>
5	
6	using namespace std;
7	
8	#define NUM_THREADS     10
9	
10	void *PrintHello(void *threadid)
11	{
12	   long tid;
13	   tid = (long)threadid;
14	   cout << "Hello World! Thread ID, " << tid << endl;
15	   pthread_exit(NULL);
16	}
17	
18	void foo()
19	{
20	   int  *x = 0;
21	  *x =100;
22	}
23	
24	void inf()
25	{
26	   while(1)
27	   {
28	      cout<< "inf" << endl;
29	   }
30	}
31	int main ()
32	{
33	   pthread_t threads[NUM_THREADS];
34	   int rc;
35	   int i;
36	   int arr[] = {5,6,7,8,9,12,34,56,78};
37	  // cin >> arr[20]; 
38	   //foo();
39	   for( i=0; i < NUM_THREADS; i++ ){
40	      cout << "main() : creating thread, " << i << endl;
41	      rc = pthread_create(&threads[i], NULL, 
42	                          PrintHello, (void *)i);
43	      if (rc){
44	         cout << "Error:unable to create thread," << rc << endl;
45	         exit(-1);
46	      }
47	   }
48	   pthread_exit(NULL);
49	
50	}(gdb) 
(gdb) b 13
Breakpoint 1 at 0x400a09: file multiThread.cpp, line 13.
(gdb) b 41
Breakpoint 2 at 0x400b05: file multiThread.cpp, line 41.
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
(gdb) watch x
(gdb) run
Starting program: /home/siddharth/Documents/ALL-MY-FILES/7thsem/SoftwareEngineering/lab/Assignment-1/mult 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
main() : creating thread, 0

Breakpoint 2, main () at multiThread.cpp:42
42	                          PrintHello, (void *)i);
(gdb) bt
#0  main () at multiThread.cpp:42
(gdb) wt[K[Kinfo locaks[K[K[Kals
threads = {140737488345696, 4197351, 2, 4197437, 140733193388033, 0, 4197360, 4196624, 140737488345984, 0}
rc = 32767
i = 0
arr = {5, 6, 7, 8, 9, 12, 34, 56, 78}
(gdb) in[K[Kinfo[K[K[K[Kinfo [K[K[K[K[Kwatch i
Hardware watchpoint 3: i
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
	breakpoint already hit 1 time
3       hw watchpoint  keep y                      i
(gdb) cont
Continuing.
[New Thread 0x7ffff6fd5700 (LWP 5775)]
[Switching to Thread 0x7ffff6fd5700 (LWP 5775)]

Breakpoint 1, PrintHello (threadid=0x0) at multiThread.cpp:13
13	   tid = (long)threadid;
(gdb) cont
Continuing.
[Switching to Thread 0x7ffff7fcc780 (LWP 5765)]
Hardware watchpoint 3: i

Old value = 0
New value = 1
0x0000000000400b80 in main () at multiThread.cpp:39
39	   for( i=0; i < NUM_THREADS; i++ ){
(gdb) con[K[K[Kwatch -l [K[K[K[K[K[K[K[K[Kinfo locasl[K[K;s
threads = {140737337186048, 4197351, 2, 4197437, 140733193388033, 0, 4197360, 4196624, 140737488345984, 0}
rc = 0
i = 1
arr = {5, 6, 7, 8, 9, 12, 34, 56, 78}
(gdb) watch -l i
Hardware watchpoint 4: -location i
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
	breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
	breakpoint already hit 1 time
3       hw watchpoint  keep y                      i
	breakpoint already hit 1 time
4       hw watchpoint  keep y                      -location i
(gdb) on[K[Kcont
Continuing.
Hello World! Thread ID, 0
main() : creating thread, 1

Breakpoint 2, main () at multiThread.cpp:42
42	                          PrintHello, (void *)i);
(gdb) cont
Continuing.
[Thread 0x7ffff6fd5700 (LWP 5775) exited]
[New Thread 0x7ffff67d4700 (LWP 5783)]
[Switching to Thread 0x7ffff67d4700 (LWP 5783)]

Breakpoint 1, PrintHello (threadid=0x1) at multiThread.cpp:13
13	   tid = (long)threadid;
(gdb) cont
Continuing.
[Switching to Thread 0x7ffff7fcc780 (LWP 5765)]
Hardware watchpoint 3: i

Old value = 1
New value = 2
Hardware watchpoint 4: -location i

Old value = 1
New value = 2
0x0000000000400b80 in main () at multiThread.cpp:39
39	   for( i=0; i < NUM_THREADS; i++ ){
(gdb) co[K[Kinfo b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
	breakpoint already hit 2 times
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
	breakpoint already hit 2 times
3       hw watchpoint  keep y                      i
	breakpoint already hit 2 times
4       hw watchpoint  keep y                      -location i
	breakpoint already hit 1 time
(gdb) watch -l [K[K[K[K[K[K[K[K[Klca[K[K[Klocl[Kal [K[K[K[K[K[Kinfo local
threads = {140737337186048, 140737328793344, 2, 4197437, 140733193388033, 0, 4197360, 4196624, 140737488345984, 0}
rc = 0
i = 2
arr = {5, 6, 7, 8, 9, 12, 34, 56, 78}
(gdb) wartch[K[K[K[Ktch [K[K[K[K[K[Kdelte[K[K[Klete 4
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
	breakpoint already hit 2 times
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
	breakpoint already hit 2 times
3       hw watchpoint  keep y                      i
	breakpoint already hit 2 times
(gdb) ingo[K[K[K[Kwatch -l i
Hardware watchpoint 5: -location i
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400a09 in PrintHello(void*) at multiThread.cpp:13
	breakpoint already hit 2 times
2       breakpoint     keep y   0x0000000000400b05 in main() at multiThread.cpp:41
	breakpoint already hit 2 times
3       hw watchpoint  keep y                      i
	breakpoint already hit 2 times
5       hw watchpoint  keep y                      -location i
(gdb) fram
#0  0x0000000000400b80 in main () at multiThread.cpp:39
39	   for( i=0; i < NUM_THREADS; i++ ){
(gdb) quit
A debugging session is active.

	Inferior 1 [process 5765] will be killed.

Quit anyway? (y or n) 